
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'add alter and between bigint boolean by char char character check column coma constraint databases date day decimal decimal default diferente1 diferente2 distinct division dospuntos double drop elevado enum exist false foreign from group having hour id if igual ilike in inherits insert int integer interval into isnull key like llavea llavec mas mayor mayor_igual menor menor_igual menos minute mode modulo money month multiplicacion not notnull null numeric or owner para parac parc precision primary ptcoma punto real references rename replace second select set show simboloor similar smallint symetric table time timestamp to true type unique unknown update values varchar varyng where without year zoneinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccion instruccion      : OPLOGICA\n                        | SELECT  SELECT : select distinct  LEXP from LFROM WHERE\n\t          | select  LEXP from LFROM WHERE\n\tLFROM : LEXP\n\t        |  para SELECT parc\n WHERE : where EXP ptcoma\n                | where EXP GROUP\n\t            | GROUP GROUP :  group by EXP HAVING ptcoma\n\t            | HAVING HAVING : having EXP\n\t| ptcoma OPLOGICA :  not RELACIONAL\n                 | OPLOGICA and RELACIONAL\n                 | OPLOGICA or RELACIONALRELACIONAL : RELACIONAL mayor EXP\n                 | RELACIONAL menor EXP\n                 | RELACIONAL mayor_igual EXP\n                 | RELACIONAL menor_igual EXP\n                 | RELACIONAL igual EXP\n                 | RELACIONAL diferente1 EXP\n                 | RELACIONAL diferente2 EXP\n                 | EXPLEXP : LEXP coma EXP\n\t| EXP\n\t| multiplicacionEXP : EXP mas EXP1\n            | EXP menos EXP1\n            | EXP multiplicacion  EXP1\n            | EXP division EXP1\n            | EXP1EXP1 : EXP1 modulo EXP2\n             | EXP1 elevado EXP2\n             | EXP2EXP2 : para EXP parc\n              | UNARIO EXP\n              | int\n              | decimal\n              | varchar\n              | char\n              | true\n              | false\n              | id\n              | id punto EXPUNARIO : mas\n                | menos'
    
_lr_action_items = {'not':([0,2,3,4,5,8,11,12,14,16,19,20,21,22,23,24,25,30,31,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,74,75,77,80,83,85,86,89,],[6,6,-3,-4,-5,-2,-17,-27,-35,-38,-41,-42,-43,-44,-45,-46,-47,-18,-19,-40,-20,-21,-22,-23,-24,-25,-26,-31,-32,-33,-34,-36,-37,-39,-48,-7,-16,-12,-14,-6,-15,-10,-11,-13,]),'select':([0,2,3,4,5,8,11,12,14,16,19,20,21,22,23,24,25,30,31,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,69,72,74,75,77,80,83,85,86,89,],[7,7,-3,-4,-5,-2,-17,-27,-35,-38,-41,-42,-43,-44,-45,-46,-47,-18,-19,-40,-20,-21,-22,-23,-24,-25,-26,-31,-32,-33,-34,-36,-37,-39,-48,7,-7,-16,-12,-14,-6,-15,-10,-11,-13,]),'$end':([1,2,3,4,5,8,11,12,14,16,19,20,21,22,23,24,25,30,31,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,74,75,77,80,83,85,86,89,],[0,-1,-3,-4,-5,-2,-17,-27,-35,-38,-41,-42,-43,-44,-45,-46,-47,-18,-19,-40,-20,-21,-22,-23,-24,-25,-26,-31,-32,-33,-34,-36,-37,-39,-48,-7,-16,-12,-14,-6,-15,-10,-11,-13,]),'and':([4,11,12,14,16,19,20,21,22,23,24,25,30,31,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,],[9,-17,-27,-35,-38,-41,-42,-43,-44,-45,-46,-47,-18,-19,-40,-20,-21,-22,-23,-24,-25,-26,-31,-32,-33,-34,-36,-37,-39,-48,]),'or':([4,11,12,14,16,19,20,21,22,23,24,25,30,31,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,],[10,-17,-27,-35,-38,-41,-42,-43,-44,-45,-46,-47,-18,-19,-40,-20,-21,-22,-23,-24,-25,-26,-31,-32,-33,-34,-36,-37,-39,-48,]),'para':([6,7,9,10,13,15,17,18,26,32,33,34,35,36,37,38,39,40,41,42,43,44,47,49,50,66,69,73,78,82,],[17,17,17,17,-49,-50,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,69,17,69,17,17,17,17,]),'int':([6,7,9,10,13,15,17,18,26,32,33,34,35,36,37,38,39,40,41,42,43,44,47,49,50,66,69,73,78,82,],[19,19,19,19,-49,-50,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'decimal':([6,7,9,10,13,15,17,18,26,32,33,34,35,36,37,38,39,40,41,42,43,44,47,49,50,66,69,73,78,82,],[20,20,20,20,-49,-50,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'varchar':([6,7,9,10,13,15,17,18,26,32,33,34,35,36,37,38,39,40,41,42,43,44,47,49,50,66,69,73,78,82,],[21,21,21,21,-49,-50,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'char':([6,7,9,10,13,15,17,18,26,32,33,34,35,36,37,38,39,40,41,42,43,44,47,49,50,66,69,73,78,82,],[22,22,22,22,-49,-50,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'true':([6,7,9,10,13,15,17,18,26,32,33,34,35,36,37,38,39,40,41,42,43,44,47,49,50,66,69,73,78,82,],[23,23,23,23,-49,-50,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'false':([6,7,9,10,13,15,17,18,26,32,33,34,35,36,37,38,39,40,41,42,43,44,47,49,50,66,69,73,78,82,],[24,24,24,24,-49,-50,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'id':([6,7,9,10,13,15,17,18,26,32,33,34,35,36,37,38,39,40,41,42,43,44,47,49,50,66,69,73,78,82,],[25,25,25,25,-49,-50,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'mas':([6,7,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,73,78,81,82,83,87,],[13,13,13,13,39,-49,-35,-50,-38,13,13,-41,-42,-43,-44,-45,-46,-47,13,39,13,13,13,13,13,13,13,13,13,13,13,13,13,39,39,13,13,13,39,39,39,39,39,39,39,-31,-32,-33,-34,-36,-37,-39,39,13,13,39,13,13,39,13,39,39,]),'menos':([6,7,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,73,78,81,82,83,87,],[15,15,15,15,40,-49,-35,-50,-38,15,15,-41,-42,-43,-44,-45,-46,-47,15,40,15,15,15,15,15,15,15,15,15,15,15,15,15,40,40,15,15,15,40,40,40,40,40,40,40,-31,-32,-33,-34,-36,-37,-39,40,15,15,40,15,15,40,15,40,40,]),'distinct':([7,],[26,]),'multiplicacion':([7,12,14,16,19,20,21,22,23,24,25,26,28,45,46,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,70,81,83,87,],[29,41,-35,-38,-41,-42,-43,-44,-45,-46,-47,29,41,41,41,29,41,41,41,41,41,41,41,-31,-32,-33,-34,-36,-37,-39,41,29,41,41,41,41,]),'mayor':([11,12,14,16,19,20,21,22,23,24,25,30,31,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,],[32,-27,-35,-38,-41,-42,-43,-44,-45,-46,-47,32,32,-40,-20,-21,-22,-23,-24,-25,-26,-31,-32,-33,-34,-36,-37,-39,-48,]),'menor':([11,12,14,16,19,20,21,22,23,24,25,30,31,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,],[33,-27,-35,-38,-41,-42,-43,-44,-45,-46,-47,33,33,-40,-20,-21,-22,-23,-24,-25,-26,-31,-32,-33,-34,-36,-37,-39,-48,]),'mayor_igual':([11,12,14,16,19,20,21,22,23,24,25,30,31,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,],[34,-27,-35,-38,-41,-42,-43,-44,-45,-46,-47,34,34,-40,-20,-21,-22,-23,-24,-25,-26,-31,-32,-33,-34,-36,-37,-39,-48,]),'menor_igual':([11,12,14,16,19,20,21,22,23,24,25,30,31,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,],[35,-27,-35,-38,-41,-42,-43,-44,-45,-46,-47,35,35,-40,-20,-21,-22,-23,-24,-25,-26,-31,-32,-33,-34,-36,-37,-39,-48,]),'igual':([11,12,14,16,19,20,21,22,23,24,25,30,31,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,],[36,-27,-35,-38,-41,-42,-43,-44,-45,-46,-47,36,36,-40,-20,-21,-22,-23,-24,-25,-26,-31,-32,-33,-34,-36,-37,-39,-48,]),'diferente1':([11,12,14,16,19,20,21,22,23,24,25,30,31,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,],[37,-27,-35,-38,-41,-42,-43,-44,-45,-46,-47,37,37,-40,-20,-21,-22,-23,-24,-25,-26,-31,-32,-33,-34,-36,-37,-39,-48,]),'diferente2':([11,12,14,16,19,20,21,22,23,24,25,30,31,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,],[38,-27,-35,-38,-41,-42,-43,-44,-45,-46,-47,38,38,-40,-20,-21,-22,-23,-24,-25,-26,-31,-32,-33,-34,-36,-37,-39,-48,]),'division':([12,14,16,19,20,21,22,23,24,25,28,45,46,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,70,81,83,87,],[42,-35,-38,-41,-42,-43,-44,-45,-46,-47,42,42,42,42,42,42,42,42,42,42,-31,-32,-33,-34,-36,-37,-39,42,42,42,42,42,]),'from':([14,16,19,20,21,22,23,24,25,27,28,29,46,48,58,59,60,61,62,63,64,65,70,],[-35,-38,-41,-42,-43,-44,-45,-46,-47,49,-29,-30,-40,66,-31,-32,-33,-34,-36,-37,-39,-48,-28,]),'coma':([14,16,19,20,21,22,23,24,25,27,28,29,46,48,58,59,60,61,62,63,64,65,67,70,],[-35,-38,-41,-42,-43,-44,-45,-46,-47,50,-29,-30,-40,50,-31,-32,-33,-34,-36,-37,-39,-48,50,-28,]),'parc':([14,16,19,20,21,22,23,24,25,45,46,58,59,60,61,62,63,64,65,72,74,75,77,79,80,83,85,86,89,],[-35,-38,-41,-42,-43,-44,-45,-46,-47,64,-40,-31,-32,-33,-34,-36,-37,-39,-48,-7,-16,-12,-14,84,-6,-15,-10,-11,-13,]),'modulo':([14,16,19,20,21,22,23,24,25,46,58,59,60,61,62,63,64,65,],[43,-38,-41,-42,-43,-44,-45,-46,-47,-40,43,43,43,43,-36,-37,-39,-48,]),'elevado':([14,16,19,20,21,22,23,24,25,46,58,59,60,61,62,63,64,65,],[44,-38,-41,-42,-43,-44,-45,-46,-47,-40,44,44,44,44,-36,-37,-39,-48,]),'where':([14,16,19,20,21,22,23,24,25,28,29,46,58,59,60,61,62,63,64,65,67,68,70,71,84,],[-35,-38,-41,-42,-43,-44,-45,-46,-47,-29,-30,-40,-31,-32,-33,-34,-36,-37,-39,-48,-8,73,-28,73,-9,]),'group':([14,16,19,20,21,22,23,24,25,28,29,46,58,59,60,61,62,63,64,65,67,68,70,71,81,84,],[-35,-38,-41,-42,-43,-44,-45,-46,-47,-29,-30,-40,-31,-32,-33,-34,-36,-37,-39,-48,-8,76,-28,76,76,-9,]),'having':([14,16,19,20,21,22,23,24,25,28,29,46,58,59,60,61,62,63,64,65,67,68,70,71,81,84,87,],[-35,-38,-41,-42,-43,-44,-45,-46,-47,-29,-30,-40,-31,-32,-33,-34,-36,-37,-39,-48,-8,78,-28,78,78,-9,78,]),'ptcoma':([14,16,19,20,21,22,23,24,25,28,29,46,58,59,60,61,62,63,64,65,67,68,70,71,74,81,83,84,87,88,],[-35,-38,-41,-42,-43,-44,-45,-46,-47,-29,-30,-40,-31,-32,-33,-34,-36,-37,-39,-48,-8,74,-28,74,-16,85,-15,-9,74,89,]),'punto':([25,],[47,]),'by':([76,],[82,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,8,]),'OPLOGICA':([0,2,],[4,4,]),'SELECT':([0,2,69,],[5,5,79,]),'RELACIONAL':([6,9,10,],[11,30,31,]),'EXP':([6,7,9,10,17,18,26,32,33,34,35,36,37,38,47,49,50,66,69,73,78,82,],[12,28,12,12,45,46,28,51,52,53,54,55,56,57,65,28,70,28,45,81,83,87,]),'EXP1':([6,7,9,10,17,18,26,32,33,34,35,36,37,38,39,40,41,42,47,49,50,66,69,73,78,82,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,58,59,60,61,14,14,14,14,14,14,14,14,]),'EXP2':([6,7,9,10,17,18,26,32,33,34,35,36,37,38,39,40,41,42,43,44,47,49,50,66,69,73,78,82,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,62,63,16,16,16,16,16,16,16,16,]),'UNARIO':([6,7,9,10,17,18,26,32,33,34,35,36,37,38,39,40,41,42,43,44,47,49,50,66,69,73,78,82,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'LEXP':([7,26,49,66,],[27,48,67,67,]),'LFROM':([49,66,],[68,71,]),'WHERE':([68,71,],[72,80,]),'GROUP':([68,71,81,],[75,75,86,]),'HAVING':([68,71,81,87,],[77,77,77,88,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','gramatica2.py',221),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','gramatica2.py',226),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','gramatica2.py',232),
  ('instruccion -> OPLOGICA','instruccion',1,'p_instruccion','gramatica2.py',237),
  ('instruccion -> SELECT','instruccion',1,'p_instruccion','gramatica2.py',238),
  ('SELECT -> select distinct LEXP from LFROM WHERE','SELECT',6,'p_SELECT','gramatica2.py',243),
  ('SELECT -> select LEXP from LFROM WHERE','SELECT',5,'p_SELECT','gramatica2.py',244),
  ('LFROM -> LEXP','LFROM',1,'p_LFROM','gramatica2.py',249),
  ('LFROM -> para SELECT parc','LFROM',3,'p_LFROM','gramatica2.py',250),
  ('WHERE -> where EXP ptcoma','WHERE',3,'p_WHERE','gramatica2.py',255),
  ('WHERE -> where EXP GROUP','WHERE',3,'p_WHERE','gramatica2.py',256),
  ('WHERE -> GROUP','WHERE',1,'p_WHERE','gramatica2.py',257),
  ('GROUP -> group by EXP HAVING ptcoma','GROUP',5,'p_GROUP','gramatica2.py',261),
  ('GROUP -> HAVING','GROUP',1,'p_GROUP','gramatica2.py',262),
  ('HAVING -> having EXP','HAVING',2,'p_HAVING','gramatica2.py',266),
  ('HAVING -> ptcoma','HAVING',1,'p_HAVING','gramatica2.py',267),
  ('OPLOGICA -> not RELACIONAL','OPLOGICA',2,'p_OPLOGICA','gramatica2.py',271),
  ('OPLOGICA -> OPLOGICA and RELACIONAL','OPLOGICA',3,'p_OPLOGICA','gramatica2.py',272),
  ('OPLOGICA -> OPLOGICA or RELACIONAL','OPLOGICA',3,'p_OPLOGICA','gramatica2.py',273),
  ('RELACIONAL -> RELACIONAL mayor EXP','RELACIONAL',3,'p_RELACIONAL','gramatica2.py',277),
  ('RELACIONAL -> RELACIONAL menor EXP','RELACIONAL',3,'p_RELACIONAL','gramatica2.py',278),
  ('RELACIONAL -> RELACIONAL mayor_igual EXP','RELACIONAL',3,'p_RELACIONAL','gramatica2.py',279),
  ('RELACIONAL -> RELACIONAL menor_igual EXP','RELACIONAL',3,'p_RELACIONAL','gramatica2.py',280),
  ('RELACIONAL -> RELACIONAL igual EXP','RELACIONAL',3,'p_RELACIONAL','gramatica2.py',281),
  ('RELACIONAL -> RELACIONAL diferente1 EXP','RELACIONAL',3,'p_RELACIONAL','gramatica2.py',282),
  ('RELACIONAL -> RELACIONAL diferente2 EXP','RELACIONAL',3,'p_RELACIONAL','gramatica2.py',283),
  ('RELACIONAL -> EXP','RELACIONAL',1,'p_RELACIONAL','gramatica2.py',284),
  ('LEXP -> LEXP coma EXP','LEXP',3,'p_LEXP','gramatica2.py',288),
  ('LEXP -> EXP','LEXP',1,'p_LEXP','gramatica2.py',289),
  ('LEXP -> multiplicacion','LEXP',1,'p_LEXP','gramatica2.py',290),
  ('EXP -> EXP mas EXP1','EXP',3,'p_EXP','gramatica2.py',294),
  ('EXP -> EXP menos EXP1','EXP',3,'p_EXP','gramatica2.py',295),
  ('EXP -> EXP multiplicacion EXP1','EXP',3,'p_EXP','gramatica2.py',296),
  ('EXP -> EXP division EXP1','EXP',3,'p_EXP','gramatica2.py',297),
  ('EXP -> EXP1','EXP',1,'p_EXP','gramatica2.py',298),
  ('EXP1 -> EXP1 modulo EXP2','EXP1',3,'p_EXP1','gramatica2.py',302),
  ('EXP1 -> EXP1 elevado EXP2','EXP1',3,'p_EXP1','gramatica2.py',303),
  ('EXP1 -> EXP2','EXP1',1,'p_EXP1','gramatica2.py',304),
  ('EXP2 -> para EXP parc','EXP2',3,'p_EXP2','gramatica2.py',308),
  ('EXP2 -> UNARIO EXP','EXP2',2,'p_EXP2','gramatica2.py',309),
  ('EXP2 -> int','EXP2',1,'p_EXP2','gramatica2.py',310),
  ('EXP2 -> decimal','EXP2',1,'p_EXP2','gramatica2.py',311),
  ('EXP2 -> varchar','EXP2',1,'p_EXP2','gramatica2.py',312),
  ('EXP2 -> char','EXP2',1,'p_EXP2','gramatica2.py',313),
  ('EXP2 -> true','EXP2',1,'p_EXP2','gramatica2.py',314),
  ('EXP2 -> false','EXP2',1,'p_EXP2','gramatica2.py',315),
  ('EXP2 -> id','EXP2',1,'p_EXP2','gramatica2.py',316),
  ('EXP2 -> id punto EXP','EXP2',3,'p_EXP2','gramatica2.py',317),
  ('UNARIO -> mas','UNARIO',1,'p_UNARIO','gramatica2.py',321),
  ('UNARIO -> menos','UNARIO',1,'p_UNARIO','gramatica2.py',322),
]
