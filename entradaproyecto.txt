drop all();
create database prueba;
create database prueba2;
create database prueba3;
create database wenas;

show databases;
use wenas;
create table tblibrosalario
( idempleado integer not null,
  aniocalculo integer not null CONSTRAINT aniosalario CHECK (aniocalculo > 0),
  mescalculo  integer not null CONSTRAINT mescalculo CHECK (mescalculo < 12),
  salariobase  money not null,
  comision     decimal,
  primary key(idempleado)
 );

create table tblibrosalariohis
( 
    idhistorico integer not null primary key,
    constraint ch1 CHECK (idhistorico >= 589.4)
) INHERITS (tblibrosalario);

 CREATE TABLE pruebita (
nombre_prueba VARCHAR (50) primary key,
numero integer,
salary real,
constraint uq unique(numero,salary) 
);

 CREATE TABLE employees (
first_name VARCHAR (50),
last_name VARCHAR (50) references pruebita,
salary  money ,
salard double precision,
constraint pk primary key (first_name, salary)
);


 CREATE TABLE pruebita2 (
nombre_prueba VARCHAR (50),
numero integer,
salary1 real, 
primary key (numero)
)inherits(employees);

 CREATE TABLE pruebita3 (
nombre_prueba VARCHAR (50),
numero integer,
salary real 
);

show tables(wenas);

insert into employees values ('juan','perez',20.4,20.4);
insert into employees values ('juan2','perez2',20.4,20.4);
insert into employees values ('juan3','perez3',20.4,20.4);

insert into pruebita values ('prueba1',32,63.41);
insert into pruebita values ('prueba2',33,63.44);
insert into pruebita values ('prueba3',42,67.34);

insert into pruebita2 values ('prueba1',32,63.41);
insert into pruebita2 values ('prueba2',33,63.44);
insert into pruebita2 values ('prueba3',42,67.34);

select * from employees,pruebita,pruebita2;


drop all();
create database prueba;
create database prueba2;
create database prueba3;
create database wenas;

show databases;
use wenas;
 CREATE TABLE employees (
first_name VARCHAR (50),
last_name VARCHAR (50),
salary  money ,
salard double precision 
);

 CREATE TABLE pruebita (
nombre_prueba VARCHAR (50),
numero integer,
salary real 
);

 CREATE TABLE pruebita2 (
nombre_prueba VARCHAR (50),
numero integer,
salary real 
);

 CREATE TABLE pruebita3 (
nombre_prueba VARCHAR (50),
numero integer,
salary real 
);

show tables(wenas);

insert into employees values ('juan','perez',10.4,20.4);
insert into employees values ('juan2','perez2',20.4,20.4);
insert into employees values ('juan3','perez3',30.4,20.4);
insert into employees values ('juan4','peresdz2',40.4,20.4);
insert into employees values ('juan5','perez3d',50.4,20.4);
insert into employees values ('juan6','perez2d',60.4,20.4);
insert into employees values ('juan7','perez334',70.4,20.4);

insert into pruebita values ('prueba1',32,63.41);
insert into pruebita values ('prueba2',33,63.44);
insert into pruebita values ('prueba3',42,67.34);

insert into pruebita2 values ('prueba1',32,63.41);
insert into pruebita2 values ('prueba2',33,63.44);
insert into pruebita2 values ('prueba3',42,67.34);

select * from employees where salary>40;
select * from employees where salary>salard;
select * from employees where salary=salard;


drop all();
create database prueba;
create database wenas;

show databases;
use wenas;
CREATE TABLE employees (
id integer,
first_name VARCHAR (50),
last_name VARCHAR (50),
salary  money,
codarea integer
);

 CREATE TABLE area (
codigo integer,
nombre VARCHAR (50) 
);

 

show tables(wenas);

insert into area values (1,'area1');
insert into area values (2,'area2');
insert into area values (3,'area3');

insert into employees values (1,'juan','perez',10.4,1);
insert into employees values (2,'juan2','perez2',20.4,1);
insert into employees values (3,'juan3','perez3',30.4,1);
insert into employees values (4,'juan4','peresdz2',40.4,2);
insert into employees values (5,'juan5','perez3d',50.4,2);
insert into employees values (6,'juan6','perez2d',60.4,2);
insert into employees values (7,'juan7','perez334',70.4,3);



select * from employees;
select * from employees where 40<salary;
select * from employees,area where codarea=1;
select * from employees,area where codarea=codigo;

-----------------------------------------------------------------------------------------------------

CREATE DATABASE DBFase2;

USE DBFase2;

CREATE FUNCTION myFuncion(texto text) RETURNS text AS $$
BEGIN
	RETURN texto;
END;
$$ LANGUAGE plpgsql;

select myFuncion('INICIO CALIFICACION FASE 2');

CREATE TABLE tbProducto (idproducto integer not null primary key,
  						 producto varchar(150) not null,
  						 fechacreacion date not null,
						 estado integer);

CREATE UNIQUE INDEX idx_producto ON tbProducto (idproducto);

CREATE TABLE tbCalificacion (idcalifica integer not null primary key,
							 item varchar(100) not null,
							 punteo integer not null);

CREATE UNIQUE INDEX idx_califica ON tbCalificacion (idcalifica);
CREATE INDEX idx2 on tbCalificacion (item desc nulls last);
						 
INSERT INTO tbProducto values(1,'Laptop Lenovo',now(),1);
INSERT INTO tbProducto values(2,'Bateria para Laptop Lenovo T420',now(),1);
INSERT INTO tbProducto values(3,'Teclado Inalambrico',now(),1);
INSERT INTO tbProducto values(4,'Mouse Inalambrico',now(),1);
INSERT INTO tbProducto values(5,'WIFI USB',now(),1);

CREATE FUNCTION ValidaRegistros(tabla varchar(50),cantidad integer) RETURNS int AS $$
DECLARE resultado INTEGER; 
		retorna   INTEGER;
BEGIN
	if tabla = 'tbProducto' then
	    resultado := (SELECT COUNT(*) FROM tbProducto);
    	if cantidad = resultado then
			retorna = 1;
		else 
			retorna = 0;
		end if;
	end if;
RETURN retorna;
END;
$$ LANGUAGE plpgsql;


insert into tbCalificacion values(1,'Create Table and Insert',ValidaRegistros('tbProducto',2));
																			  
select * from tbCalificacion;

------------------------------------------------------------------------------------------------------
CREATE DATABASE DBFase2;

USE DBFase2;

CREATE FUNCTION myFuncion(texto text) RETURNS text AS $$
BEGIN
	RETURN texto;
END;
$$ LANGUAGE plpgsql;

select myFuncion('INICIO CALIFICACION FASE 2');

CREATE TABLE tbProducto (idproducto integer not null primary key,
  						 producto varchar(150) not null,
  						 fechacreacion date not null,
						 estado integer);

CREATE UNIQUE INDEX idx_producto ON tbProducto (idproducto);

CREATE TABLE tbCalificacion (idcalifica integer not null primary key,
							 item varchar(100) not null,
							 punteo integer not null);

CREATE UNIQUE INDEX idx_califica ON tbCalificacion (idcalifica);
						 
INSERT INTO tbProducto values(1,'Laptop Lenovo',now(),1);
INSERT INTO tbProducto values(2,'Bateria para Laptop Lenovo T420',now(),1);
INSERT INTO tbProducto values(3,'Teclado Inalambrico',now(),1);
INSERT INTO tbProducto values(4,'Mouse Inalambrico',now(),1);
INSERT INTO tbProducto values(5,'WIFI USB',now(),1);

CREATE FUNCTION ValidaRegistros(tabla varchar(50),cantidad integer) RETURNS int AS $$
DECLARE resultado INTEGER; 
		retorna   INTEGER;
BEGIN
	if tabla = 'tbProducto' then
	    resultado := (SELECT COUNT(*) FROM tbProducto);
    	if cantidad = resultado then
			retorna = 1;
		else 
			retorna = 0;
		end if;
	end if;
RETURN retorna;
END;
$$ LANGUAGE plpgsql;


--insert into tbCalificacion values(1,'Create Table and Insert',ValidaRegistros('tbProducto',2));
																			  
select * from tbCalificacion;

CREATE INDEX test1_id_index ON test1 (id);
CREATE INDEX name ON nuevo USING HASH (nose);
CREATE INDEX test2_mm_idx ON test2 (major, minor);
CREATE INDEX test2_n_low ON test2 (nuevo NULLS FIRST);
CREATE INDEX test3_desc_index ON test3 (id DESC NULLS LAST);
CREATE UNIQUE INDEX indice ON employees (columna1,columna2);
CREATE INDEX test1_lower_col1_idx ON test1 (lower(col1));
CREATE INDEX access_log_client_ip_ix ON access_log (client_ip)
     WHERE NOT (client_ip > inet '192.168.100.0' AND
     client_ip < inet '192.168.100.255');
CREATE INDEX mytable_cat_1 ON mytable (data) WHERE category = 1;
CREATE INDEX mytable_cat_2 ON mytable (data) WHERE category = 2;
CREATE INDEX mytable_cat_3 ON mytable (data) WHERE category = 3;
CREATE INDEX indice ON tabla (columna1 varchar_ops ASC NULLS FIRST);


user_id integer;
quantity numeric(5);
url varchar(2);
myrow tablename%ROWTYPE;
myfield tablename.columnname%TYPE;



quantity integer DEFAULT 32;
url varchar := 'hola mundo';
user_id CONSTANT integer := 10;


if condition_1 then
url varchar := 'hola mundo';
elsif condition_2 then
url varchar := 'hola mundo';

elsif condition_2 then
url varchar := 'hola mundo';

else
 url varchar := 'hola mundo';
end if;


CREATE PROCEDURE triple(INOUT x int) 
LANGUAGE plpgsql
AS $$
BEGIN
    x := x * 3;
END;
$$;

DO $$
DECLARE myvar int := 5;
BEGIN
  CALL triple(myvar);
  RAISE notice 'myvar = %', myvar ;
END;
$$;

--------------------------------------------------------------------------------

CREATE DATABASE DBFase2;

USE DBFase2;

CREATE TABLE tbProducto (idproducto integer not null primary key,
  						 producto varchar(150) not null,
  						 fechacreacion date not null,
						 estado integer);

CREATE UNIQUE INDEX idx_producto ON tbProducto (idproducto);

CREATE TABLE tbCalificacion (idcalifica integer not null primary key,
							 item varchar(100) not null,
							 punteo integer not null);

CREATE UNIQUE INDEX idx_califica ON tbCalificacion (idcalifica);
CREATE INDEX idx2 on tbCalificacion (item desc nulls last);
create INDEX idxHash on tbCalificacion USING HASH (punteo,idcalifica);